/********************************************************** * Program Name       : Assignment - Blackjack Final Project * Author             : William Golembieski * Date               : May 05, 2018 * Course/Section     : CSC264 - 801 * Program Description: This program will implement the game of blackjack **********************************************************/import javax.swing.*;import javax.swing.border.TitledBorder;import javax.swing.border.Border;import javax.swing.border.EmptyBorder;import javax.swing.BorderFactory;import java.awt.*;import java.awt.event.*;import java.util.*;import java.awt.Desktop;import java.net.*;/********************************************************** * Class Name     : BlackjackPanel * Author         : William Golembieski * Date           : May 05, 2018 * Course/Section : CSC264 - 801 * Program Description: This program will set up the GUI for blackjack panel * * Methods: * ------- * BlackjackPanel          - Constructor for a BlackjackPanel **********************************************************/public class BlackjackPanel extends JPanel{	// Class constants	final int STARTING_BANKROLL = 10000;	final int MIN_BET = 50;	final int MAX_BET = 5000;	// Class variables	private String playerName;	private int bankroll;	// Panels	private JPanel topPanel = new JPanel();	private JPanel centerPanel = new JPanel();	private JPanel bottomPanel = new JPanel();	// Blackjack main panel components	private JLabel result = new JLabel();	private JButton doubleButton = new JButton("Double");	private JButton hitButton = new JButton("Hit");	private JButton staybutton = new JButton("Stay");	private JButton adviceButton = new JButton("Advice");	private JButton playAgainButton = new JButton("Play Again");	private JButton quitButton = new JButton("Quit");	private JButton moreHelpButton = new JButton("More Help");	private JLabel dealerTotal = new JLabel();	private JLabel playerTotal = new JLabel();	private Border empty = BorderFactory.createEmptyBorder();	private TitledBorder dealerTitle = BorderFactory.createTitledBorder(empty, "Dealer");	private Blackjack game = new Blackjack();	// Cards for the game	private JLabel playercard1;	private JLabel playercard2;	private JLabel playercardhit;	private JLabel dealerInitialCard;	private JLabel dealercard2;	private JLabel dealercard1;	private JLabel dealercardhit;	// Betting screen components	private JLabel remainingBalance = new JLabel();	private JButton placeBet = new JButton("Place Bet");	private JLabel placeBetText;	private JTextField bet = new JTextField();;	private JButton newGame = new JButton("New Game");	/////////////////////////////////////////////////////////////////	JTextField nameTextField = new JTextField();	JPanel initalPanel = new JPanel();	/**********************************************************	 * Method Name        : BlackjackPanel	 * Author             : William Golembieski	 * Date               : May 05, 2018	 * Course/Section     : CSC264 - 801	 * Program Description: This method will serve as the constructor	 *    of a BlackjackPanel object.	 *	 * BEGIN BlackjackPanel	 *   Colorize the screen	 *   Set name text field	 *   Set layout of panel     *   add items to panel     *   add action listeners     *   Revalidate and repaint	 * END BlackjackPanel	 **********************************************************/  public BlackjackPanel()  {	// Local constants	// Local variables	JLabel gameTitle = new JLabel("Blackjack by : William Golembieski");	JLabel enterNameText = new JLabel("<html><h1>Enter name:</h1></html>");	JButton startButton = new JButton("Start");	JLabel rules = new JLabel("<html><h1>- Rules of the game -</h1>" +								"<ul>" +								"<li>" +								"Bankroll starts at $10,000" +								"</li>" +								"<li>" +								"Minimum bet is $50" +								"</li>" +								"<li>" +								"Maxium bet is $5,000" +								"</li>" +								"<li>" +								"Blackjack pays 3:2" +								"</li>" +								"<li>" +								"Dealer draws to 16 stands on 17" +								"</li>" +								"<li>" +								"Closest player to 21 without going over wins!" +								"</li>" +								"</ul></html>");	/*******************************************/	gameTitle.setAlignmentX(Component.CENTER_ALIGNMENT);	enterNameText.setAlignmentX(Component.RIGHT_ALIGNMENT);	startButton.setAlignmentX(Component.CENTER_ALIGNMENT);	moreHelpButton.setAlignmentX(Component.CENTER_ALIGNMENT);	// Colorize the screen    initalPanel.setBackground(new Color(0, 122, 0));    topPanel.setBackground(new Color(0, 122, 0));    centerPanel.setBackground(new Color(0, 122, 0));    bottomPanel.setBackground(new Color(0, 122, 0));    setBackground(new Color(0, 122, 0));	// Set name text field    nameTextField.setColumns(20);    nameTextField.setAlignmentX(Component.CENTER_ALIGNMENT);    rules.setAlignmentX(Component.CENTER_ALIGNMENT);	startButton.addActionListener(new StartButtonListener());	// Set layout of panel	initalPanel.setLayout(new BoxLayout(initalPanel,BoxLayout.Y_AXIS));    // add items to panel	initalPanel.add(gameTitle);	add(Box.createRigidArea(new Dimension(5,0)));	initalPanel.add(enterNameText);	enterNameText.setBorder(BorderFactory.createEmptyBorder(10,0,10,0));	enterNameText.setHorizontalAlignment(SwingConstants.RIGHT);	add(Box.createRigidArea(new Dimension(5,0)));	initalPanel.add(nameTextField);	nameTextField.setBorder(BorderFactory.createEmptyBorder(0,0,10,0));	add(Box.createRigidArea(new Dimension(5,0)));	initalPanel.add(rules);	rules.setBorder(BorderFactory.createEmptyBorder(0,0,10,0));	add(Box.createRigidArea(new Dimension(5,0)));	initalPanel.add(moreHelpButton);	add(Box.createRigidArea(new Dimension(5,0)));	initalPanel.add(startButton);	add(Box.createRigidArea(new Dimension(5,0)));	add(initalPanel);    // Add Action listeners	doubleButton.addActionListener(new DoubleButtonActionListener());	hitButton.addActionListener(new HitButtonActionListener());	staybutton.addActionListener(new StayButtonActionListener());	adviceButton.addActionListener(new AdviceButtonActionListener());	playAgainButton.addActionListener(new PlayAgainButtonListener());	quitButton.addActionListener(new QuitButtonListener());	newGame.addActionListener(new NewGameButtonListener());	placeBet.addActionListener(new PlaceBetButtonListener());	startButton.addActionListener(new StartButtonListener());	moreHelpButton.addActionListener(new MoreHelpButtonListener());	// Revalidate and repaint	revalidate();	repaint();  }//end BlackjackPanel/********************************************************** * Class Name     : MoreHelpButtonListener * Author         : William Golembieski * Date           : May 05, 2018 * Course/Section : CSC264 - 801 * Class Description: This class will implement an action listener for *    the more help button. * * Methods: * ------- * actionPerformed  - Opens webpage defined in constant * openWebpage      - Opens a webpage given a passed in URI * openWebpage      - Opens a webpage given a passed in URL **********************************************************/class MoreHelpButtonListener implements ActionListener{	// Class constants	// Class variables	/**********************************************************	 * Method Name    : actionPerformed	 * Author         : William Golembieski	 * Date           : May 05, 2018	 * Course/Section : CSC264 - 801	 * Program Description: This method will open a specified web page	 *	 * BEGIN actionPerformed	 *   Open help URL	 * END actionPerformed	 **********************************************************/	public void actionPerformed(ActionEvent action)	{		// Class constants		String HELP_URL = "https://entertainment.howstuffworks.com/how-to-play-blackjack.htm";		URI uriMade = URI.create(HELP_URL);		// Class variables		/*******************************************************************/		//Open help URL		openWebpage(uriMade);	}//END actionPerformed	/**********************************************************	 * Method Name    : openWebpage	 * Author         : William Golembieski	 * Date           : May 05, 2018	 * Course/Section : CSC264 - 801	 * Program Description: This method open a webpage	 *	 * BEGIN openWebpage	 *    IF(Desktop is supported)	 *       TRY(openeing a webpage)	 *       ELSE	 *          return false	 * END openWebpage	 **********************************************************/	public boolean openWebpage(URI uri)	{		// Local constants		// Local variables		Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;		/************************************************/		// IF(Desktop is supported)		if (desktop != null && desktop.isSupported(Desktop.Action.BROWSE))		{			// Try opening the webpage			try			{				// Open webpage				desktop.browse(uri);				// return true				return true;			}			// If exception is thrown			catch (Exception e)			{				// print stacktrace				e.printStackTrace();			}//END TRY		}// END IF		// Return false		return false;	}// END openWebpage	/**********************************************************	 * Method Name    : openWebpage	 * Author         : William Golembieski	 * Date           : May 05, 2018	 * Course/Section : CSC264 - 801	 * Program Description: This method open a webpage	 *	 * BEGIN openWebpage	 *       TRY(opening a webpage)	 *         Return webpage	 *       ELSE	 *          Print stacktrace	 * 	     Return false	 * END openWebpage	 **********************************************************/	public boolean openWebpage(URL url)	{		// Local constants		// Local variables		/**********************************************/		// TRY(opening a webpage)		try		{			// Return webpage			return openWebpage(url.toURI());		}		catch (URISyntaxException e)		{			// Print stacktrace			e.printStackTrace();		}		// Retunr false		return false;	}// END openWebpage}//end MoreHelpButtonListener/********************************************************** * Class Name     : StartButtonListener * Author         : William Golembieski * Date           : May 05, 2018 * Course/Section : CSC264 - 801 * Class Description: This class will implement an action listener for *    the start button. * * Methods: * ------- * actionPerformed  - lays a design out when start button is pushed **********************************************************/class StartButtonListener implements ActionListener{	// Class constants	// Class variablesv	/**********************************************************	 * Method Name    : actionPerformed	 * Author         : William Golembieski	 * Date           : May 05, 2018	 * Course/Section : CSC264 - 801	 * Program Description: This method open a webpage	 *	 * BEGIN actionPerformed	 *       Set player name to text box value	 *       Initialize starting bankroll	 *       Clear top center and bottom panels	 *       Set up betting board	 * 	     Create text field	 * 	     Add to center panel	 * 	     Set up bottom panel	 * 	     Add panels to layout manager	 *       Revalidate and repaint frame	 * END actionPerformed	 **********************************************************/	public void actionPerformed(ActionEvent action)	{		// Local constants		// Local variables		/*******************************************************************/		remove(initalPanel);		setLayout(new BorderLayout());		// Set player name to text box value		playerName = Util.toTitleCase(nameTextField.getText());		// Initialize starting bankroll		bankroll = STARTING_BANKROLL;		// Clear top center and bottom panels		topPanel.removeAll();		centerPanel.removeAll();		bottomPanel.removeAll();		topPanel.setLayout(new BoxLayout(topPanel,BoxLayout.Y_AXIS));		topPanel.setBorder(BorderFactory.createEmptyBorder(150,200,0,200));		//Set up betting board		remainingBalance.setText("Remaining Balance: $" + bankroll);		remainingBalance.setFont(new Font("Serif", Font.BOLD, 20));		remainingBalance.setAlignmentX(Component.CENTER_ALIGNMENT);		topPanel.add(remainingBalance);		// Create text field		placeBetText = new JLabel("Place a bet - MIN $"+ MIN_BET + " MAX $" + MAX_BET);		placeBetText.setFont(new Font("Serif", Font.BOLD, 14));		bet.setColumns(20);		// Add to center panel		topPanel.add(placeBetText);		placeBetText.setAlignmentX(Component.CENTER_ALIGNMENT);		topPanel.add(bet);		bet.setAlignmentX(Component.CENTER_ALIGNMENT);		//Set up bottom panel		topPanel.add(placeBet);		placeBet.setAlignmentX(Component.CENTER_ALIGNMENT);		topPanel.add(quitButton);		quitButton.setAlignmentX(Component.CENTER_ALIGNMENT);		// Add panels to layout manager		add(topPanel,BorderLayout.NORTH);		// Revalidate and repaint frame		repaint();		revalidate();	}//END actionPerformed}//end StartButtonListener/********************************************************** * Class Name     : QuitButtonListener * Author         : William Golembieski * Date           : May 05, 2018 * Course/Section : CSC264 - 801 * Class Description: This class will implement an action listener for *    the quit button. * * Methods: * ------- * actionPerformed  - quits the program **********************************************************/class QuitButtonListener implements ActionListener{	// Class constants	// Class variables	/**********************************************************	 * Method Name    : actionPerformed	 * Author         : William Golembieski	 * Date           : May 05, 2018	 * Course/Section : CSC264 - 801	 * Program Description: This method open a webpage	 *	 * BEGIN actionPerformed	 *       System exit	 * END actionPerformed	 **********************************************************/	public void actionPerformed(ActionEvent action)	{		// Local constants		// Local variables		/*******************************************************************/		// Save score to database?		// System exit		System.exit(0);	}// end actionPerformed}//end QuitButtonListener/********************************************************** * Class Name     : NewGameButtonListener * Author         : William Golembieski * Date           : May 05, 2018 * Course/Section : CSC264 - 801 * Class Description: This class will implement an action listener for *    the new game button. * * Methods: * ------- * actionPerformed  - lays a design out when new game button is pushed **********************************************************/class NewGameButtonListener implements ActionListener{	// Class constants	// Class variables	/**********************************************************	 * Method Name    : actionPerformed	 * Author         : William Golembieski	 * Date           : May 05, 2018	 * Course/Section : CSC264 - 801	 * Program Description: This method open a webpage	 *	 * BEGIN actionPerformed	 *       Reset game	 *       Initialize starting bankroll	 *       Clear top center and bottom panels	 *       Set up betting board	 * 	     Create text field	 * 	     Add to center panel	 * 	     Set up bottom panel	 * 	     Add panels to layout manager	 *       Revalidate and repaint frame	 * END actionPerformed	 **********************************************************/	public void actionPerformed(ActionEvent action)	{		// Local constants		// Local variables		/*******************************************************************/		// Reset game		game.clearHands();		game.getNewShoe();		game.setPlayerBet(0);		// Initialize starting bankroll		bankroll = STARTING_BANKROLL;		// Clear top center and bottom panels		topPanel.setLayout(new FlowLayout());		topPanel.removeAll();		centerPanel.removeAll();		bottomPanel.removeAll();		//Set up betting board		remainingBalance.setText("Remaining Balance: $" + bankroll);		topPanel.add(remainingBalance);		// Create text field		placeBetText = new JLabel("Place a bet - MIN $"+ MIN_BET + " MAX $" + MAX_BET);		bet.setColumns(20);		// Add to center panel		centerPanel.add(placeBetText);		centerPanel.add(bet);		//Set up bottom panel		bottomPanel.add(placeBet);		bottomPanel.add(quitButton);		// Add panels to layout manager		add(topPanel,BorderLayout.NORTH);		add(centerPanel,BorderLayout.CENTER);	    add(bottomPanel,BorderLayout.SOUTH);		// Revalidate and repaint frame		revalidate();		repaint();	}}//end NewGameButtonListener/********************************************************** * Class Name     : PlaceBetButtonListener * Author         : William Golembieski * Date           : May 05, 2018 * Course/Section : CSC264 - 801 * Class Description: This class will implement an action listener for *    the new game button. * * Methods: * ------- * actionPerformed  - places a bet and lays out the next design **********************************************************/class PlaceBetButtonListener implements ActionListener{	// Class constants	// Class variables	/**********************************************************	 * Method Name    : actionPerformed	 * Author         : William Golembieski	 * Date           : May 05, 2018	 * Course/Section : CSC264 - 801	 * Program Description: This method open a webpage	 *	 * BEGIN actionPerformed	 *       Set player name to text box value	 *       Initialize starting bankroll	 *       Clear top center and bottom panels	 *       Set up betting board	 * 	     Create text field	 * 	     Add to center panel	 * 	     Set up bottom panel	 * 	     Add panels to layout manager	 *       Revalidate and repaint frame	 * END actionPerformed	 **********************************************************/  public void actionPerformed(ActionEvent action)  {	// Local constants	// Local variables	final ImageIcon icon = new ImageIcon("magicword.gif");	int cardCounter = 0;	Card dealerCard = null;	Card playerCard = null;	Iterator<Card> dealerIterator;	Iterator<Card> playerIterator;	int playerBet;	/*********************************************/	topPanel.setLayout(new FlowLayout());	// Try to place bet	try	{		// parse int		playerBet = Integer.parseInt(bet.getText().trim());		// If we have enough money		if(playerBet < MIN_BET || playerBet > MAX_BET || playerBet > bankroll)		{			// Display error message			JOptionPane.showMessageDialog(null, "YOU CANT DO THAT", "ERROR", JOptionPane.INFORMATION_MESSAGE, icon);		}		// ELSE (valid input)		else		{			// set the player bet			game.setPlayerBet(playerBet);			// If it is time to shuffle the shoe			if(game.isTimeToShuffle())			{				// Instantiate new shuffled shoe				game.getNewShoe();			}//END IF			// Clear hands			game.clearHands();			topPanel.removeAll();			centerPanel.removeAll();			bottomPanel.removeAll();			topPanel.setBorder(new EmptyBorder( 70, 0, 0, 0 ));			centerPanel.setBorder(new EmptyBorder( 100, 0, 50, 0 ));			bottomPanel.setBorder(new EmptyBorder( 0, 0, 100, 0 ));			topPanel.add(dealerTotal);			centerPanel.add(playerTotal);			bottomPanel.add(doubleButton);			bottomPanel.add(hitButton);			bottomPanel.add(staybutton);			bottomPanel.add(adviceButton);			// Set dealer initial card to back of a card			dealerInitialCard = new JLabel(new ImageIcon("back.jpg"));			// Deal initial cards to dealer and player			game.dealInitialCards();			//Iterate current dealer card pictures, saves us from returning the whole array.			dealerIterator = game.getDealerIterator();			// WHILE(There are cards in the dealer hand, should only be 2!)			while(dealerIterator.hasNext())			{				// Set dealerCard to next dealer card in iterator				dealerCard = dealerIterator.next();				// IF the card counter is 0				if(cardCounter == 0)				{					// Get the first card image					dealercard1 = new JLabel(dealerCard.getCardPicture());				}				// ELSE(not the first card)				else				{					// Get the second card image					dealercard2 = new JLabel(dealerCard.getCardPicture());				}				// Increment card count				cardCounter++;			}			// Set text of dealer total (for last card)			dealerTotal.setText("Dealer Total:  " + dealerCard.getTrueValue());			//Iterate current player card pictures, saves us from returning the whole array.			playerIterator = game.getPlayerIterator();			// Set card counter back to 0			cardCounter = 0;			// WHILE(There are cards in the players hand, should only be 2!)			while (playerIterator.hasNext())			{				// Set playerCard to next player card in iterator				playerCard = playerIterator.next();				// If it's the first player card				if(cardCounter == 0)				{					// Set first player card image					playercard1 = new JLabel(playerCard.getCardPicture());				}				//ELSE( its the second card)				else				{					 // Set second card image					 playercard2 = new JLabel(playerCard.getCardPicture());				}//END IF				// Increment card counter				cardCounter++;			}//END WHILE			// Add image of flipped over card to top panel			topPanel.add(dealerInitialCard);			// Add image of actual card #2 to top panel			topPanel.add(dealercard2);			// Add players cards to center panel			centerPanel.add(playercard1);			centerPanel.add(playercard2);			// Set label for players hand total			playerTotal.setText(playerName + " Total:  " + game.getPlayerHandValue());			// Enable Hit, Stay, Double, and Advice buttons			hitButton.setEnabled(true);			staybutton.setEnabled(true);			doubleButton.setEnabled(true);			adviceButton.setEnabled(true);			//IF (player doesn't have enough funds for a double bet)			if(game.getPlayerBet() * 2 > bankroll || !game.getCanBeDoubled())			{				// Set double button to disabled				doubleButton.setEnabled(false);			}//END IF			// If the player hand is a blackjack			if(game.isPlayerHandBlackjack())			{				if(!game.isDealerHandBlackjack())				{					// Set result to "BlackJack!"					result.setText("<html><h1>BlackJack!</h1></html>");					// Pay player 3:2					bankroll = bankroll + Math.round(game.getPlayerBet() * 1.5f);				}				// If dealer has a blackjack				else				{					// Set result to "PUSH!"					result.setText("<html><h1>PUSH!</h1></html>");				}//END IF				// Clear the bottom panel				bottomPanel.removeAll();				// Add Result				bottomPanel.add(result);				// Add Play Again button				bottomPanel.add(playAgainButton);				// Set Play again button to enabled				playAgainButton.setEnabled(true);				// Add Quit Button				bottomPanel.add(quitButton);				// Set Quit button to enabled				quitButton.setEnabled(true);				bankroll = bankroll + Math.round(game.getPlayerBet() * 1.5f);			}//END IF			add(topPanel,BorderLayout.NORTH);			add(centerPanel,BorderLayout.CENTER);			add(bottomPanel,BorderLayout.SOUTH);			// Revalidate and repaint frame			revalidate();			repaint();		}// END IF	}//END TRY	// IF number entered is not a number	catch(NumberFormatException e)	{		// Display message        JOptionPane.showMessageDialog(null, "THAT WASNT A NUMBER", "ERROR", JOptionPane.INFORMATION_MESSAGE, icon);	}  }//END actionPerformed}//END PlaceBetButtonListener/********************************************************** * Class Name     : HitButtonActionListener * Author         : William Golembieski * Date           : May 05, 2018 * Course/Section : CSC264 - 801 * Class Description: This class will implement an action listener for *    the hit button. * * Methods: * ------- * actionPerformed  - lays out a design when the hit button is pressed **********************************************************/class HitButtonActionListener implements ActionListener{	// Class constants	// Class variables	/**********************************************************	 * Method Name    : actionPerformed	 * Author         : William Golembieski	 * Date           : May 05, 2018	 * Course/Section : CSC264 - 801	 * Program Description: This method open a webpage	 *	 * BEGIN actionPerformed	 *       Set player name to text box value	 *       Initialize starting bankroll	 *       Clear top center and bottom panels	 *       Set up betting board	 * 	     Create text field	 * 	     Add to center panel	 * 	     Set up bottom panel	 * 	     Add panels to layout manager	 *       Revalidate and repaint frame	 * END actionPerformed	 **********************************************************/  public void actionPerformed(ActionEvent action)  {	// Local constants	// Local variables	/**************************************************/	// Get card that was just added to the player's hand    Card hitcard = game.playerHit();    playercardhit = new JLabel(hitcard.getCardPicture());    centerPanel.add(playercardhit);    game.setCanBeDoubled(false);    doubleButton.setEnabled(false);    if(game.isPlayerBust())    {		// Set result to "BUST!"		result.setText("<html><h1>BUST!</h1></html>");		// Clear the bottom panel		bottomPanel.removeAll();		// Add Result		bottomPanel.add(result);		// Add Play Again button		bottomPanel.add(playAgainButton);		// Set Play again button to enabled		playAgainButton.setEnabled(true);		// Add Quit Button		bottomPanel.add(quitButton);		// Set Quit button to enabled		quitButton.setEnabled(true);		// Remove funds		System.out.println("\n\n We just lost hit button: " + game.getPlayerBet());		System.out.println("\n\n Bankroll was : " + bankroll);		bankroll = bankroll - game.getPlayerBet();		System.out.println("\n\n Bankroll is now : " + bankroll);    }//END IF		revalidate();		repaint();    playerTotal.setText(playerName+" Total : " + game.getPlayerHandValue());  }//END actionPerformed}//END HitButtonActionListener/********************************************************** * Class Name     : StayButtonActionListener * Author         : William Golembieski * Date           : May 05, 2018 * Course/Section : CSC264 - 801 * Class Description: This class will implement an action listener for *    the stay button. * * Methods: * ------- * actionPerformed  - calculates winner and lays out result **********************************************************/class StayButtonActionListener implements ActionListener{	// Class constants	// Class variables	/**********************************************************	 * Method Name    : actionPerformed	 * Author         : William Golembieski	 * Date           : May 05, 2018	 * Course/Section : CSC264 - 801	 * Program Description: This method open a webpage	 *	 * BEGIN actionPerformed	 *       Set player name to text box value	 *       Initialize starting bankroll	 *       Clear top center and bottom panels	 *       Set up betting board	 * 	     Create text field	 * 	     Add to center panel	 * 	     Set up bottom panel	 * 	     Add panels to layout manager	 *       Revalidate and repaint frame	 * END actionPerformed	 **********************************************************/  public void actionPerformed(ActionEvent e)  {	// Local constants	// Local variables	/**********************************************/    topPanel.remove(dealerInitialCard);    topPanel.add(dealercard1);	// Have dealer play    game.dealerTurn();    topPanel.removeAll();    topPanel.add(dealerTotal);    dealerTotal.setText(" " + dealerTotal.getText());    //iterate through cards and re-display    Card dhitcard = null;    Iterator<Card> scan = game.getDealerIterator();    while (scan.hasNext())    {        dhitcard = scan.next();        dealercardhit = new JLabel(dhitcard.getCardPicture());        topPanel.add(dealercardhit);    }    dealerTotal.setText("Dealer Total: " + game.getDealerHandValue());    playerTotal.setText(playerName+" Total : " + game.getPlayerHandValue());    result.setText(game.gameResult());    //adjust bankroll for win or loss    if(game.gameResult().equals("<html><h1>LOSE!</h1></html>"))    {		// Decrement bet from bankroll		System.out.println("\n\n We just lost stay button: " + game.getPlayerBet());		System.out.println("\n\n Bankroll was : " + bankroll);		bankroll = bankroll - game.getPlayerBet();		System.out.println("\n\n Bankroll is now : " + bankroll);	}	else if(game.gameResult().equals("<html><h1>WIN!</h1></html>"))	{		// Add to bankroll		System.out.println("\n\n We just won stay button: " + game.getPlayerBet());		System.out.println("\n\n Bankroll was : " + bankroll);		bankroll = bankroll + game.getPlayerBet();		System.out.println("\n\n Bankroll is now : " + bankroll);	}//END IF	// Clear the bottom panel	bottomPanel.removeAll();	// Add Result	bottomPanel.add(result);	// Add Play Again button	bottomPanel.add(playAgainButton);	playAgainButton.setEnabled(true);	// Add Quit Button	bottomPanel.add(quitButton);	// Set Quit button to enabled	quitButton.setEnabled(true);	revalidate();	repaint();  }}//end staybutton/********************************************************** * Class Name     : PlayAgainButtonListener * Author         : William Golembieski * Date           : May 05, 2018 * Course/Section : CSC264 - 801 * Class Description: This class will implement an action listener for *    the play again button. * * Methods: * ------- * actionPerformed  - lays out design when play again button is pressed **********************************************************/class PlayAgainButtonListener implements ActionListener{	// Class constants	// Class variables	/**********************************************************	 * Method Name    : actionPerformed	 * Author         : William Golembieski	 * Date           : May 05, 2018	 * Course/Section : CSC264 - 801	 * Program Description: This method open a webpage	 *	 * BEGIN actionPerformed	 *       Set player name to text box value	 *       Initialize starting bankroll	 *       Clear top center and bottom panels	 *       Set up betting board	 * 	     Create text field	 * 	     Add to center panel	 * 	     Set up bottom panel	 * 	     Add panels to layout manager	 *       Revalidate and repaint frame	 * END actionPerformed	 **********************************************************/  public void actionPerformed(ActionEvent e)  {	// Local constants	// Local variables	/****************************************************/	// Reset labels    dealerTotal.setText("Dealer Total: ");    playerTotal.setText(playerName+" Total : ");	// Set player name to text box value	//playerName = nameTextField.getText();	// Clear top center and bottom panels	topPanel.removeAll();	centerPanel.removeAll();	bottomPanel.removeAll();		topPanel.setLayout(new BoxLayout(topPanel,BoxLayout.Y_AXIS));		topPanel.setBorder(BorderFactory.createEmptyBorder(150,200,0,200));		//Set up betting board		remainingBalance.setText("Remaining Balance: $" + bankroll);		remainingBalance.setAlignmentX(Component.CENTER_ALIGNMENT);		remainingBalance.setFont(new Font("Serif", Font.BOLD, 20));		topPanel.add(remainingBalance);		// Create text field		placeBetText = new JLabel("Place a bet - MIN $"+ MIN_BET + " MAX $" + MAX_BET);		remainingBalance.setFont(new Font("Serif", Font.BOLD, 14));		bet.setColumns(20);			if(bankroll < MIN_BET)			{				// Add to center panel				topPanel.add(newGame);			}			//ELSE player has enough money			else			{				// Add to top panel				topPanel.add(placeBetText);				placeBetText.setAlignmentX(Component.CENTER_ALIGNMENT);				topPanel.add(bet);				bet.setAlignmentX(Component.CENTER_ALIGNMENT);				//Set up bottom panel				topPanel.add(placeBet);				placeBet.setAlignmentX(Component.CENTER_ALIGNMENT);			}		topPanel.add(quitButton);		quitButton.setAlignmentX(Component.CENTER_ALIGNMENT);		// Add panels to layout manager		add(topPanel,BorderLayout.NORTH);		// Revalidate and repaint frame		repaint();		revalidate();	}}//end playAgainButton/********************************************************** * Class Name     : AdviceButtonActionListener * Author         : William Golembieski * Date           : May 05, 2018 * Course/Section : CSC264 - 801 * Class Description: This will ask the game for advise * * Methods: * ------- * actionPerformed  - Retrieves advice from the game. **********************************************************/class AdviceButtonActionListener implements ActionListener{	// Class constants	// Class variables	/**********************************************************	 * Method Name    : actionPerformed	 * Author         : William Golembieski	 * Date           : May 05, 2018	 * Course/Section : CSC264 - 801	 * Class Description: based on game advice, will display a message box	 *    with suggested strategy	 *	 * BEGIN actionPerformed	 *    IF (Advise is hit)	 *       Change icon to hit icon	 *    ELSE IF(Advise is STAND	 *       Change icon to stand icon	 *    ELSE IF(Advise is DOUBLE	 *       Change icon to double icon	 *    ELSE IF(Advise is SPLIT	 *       Change icon to split icon	 *    ELSE IF(Advise is SURRENDER	 *       Change icon to surrender icon	 *    Display answer in a dialog box	 * END actionPerformed	 **********************************************************/  public void actionPerformed(ActionEvent action)  {      // Local constants	  // Local variables	  /********************************************************/	  // Get iterator objects for both hands	  final String HIT = "Hit";	  final String STAND = "Stand";	  final String DOUBLE = "Double";	  final String SURRENDER = "Surrender";	  final String SPLIT = "Split";	  final ImageIcon iconHit = new ImageIcon("hit.jpg");	  final ImageIcon iconStand = new ImageIcon("stand.jpg");	  final ImageIcon iconDouble = new ImageIcon("double.jpg");	  final ImageIcon iconSurrender = new ImageIcon("surrender.jpg");	  final ImageIcon iconSplit = new ImageIcon("split.jpg");	  // Variables	  String gameAdvice = game.advice();	  ImageIcon displayIcon = new ImageIcon("hit.jpg");	  // IF (Advise is hit)	  if(gameAdvice.equals(HIT))	  {		  // Change icon to hit icon		  displayIcon = iconHit;	  }	  // ELSE IF(Advise is STAND)	  else if(gameAdvice.equals(STAND))	  {		  // Change icon to STAND icon		  displayIcon = iconStand;	  }	  // ELSE IF(Advise is DOUBLE)	  else if(gameAdvice.equals(DOUBLE))	  {		  // Change icon to DOUBLE icon		  displayIcon = iconDouble;	  }	  // ELSE IF(Advise is SPLIT)	  else if(gameAdvice.equals(SPLIT))	  {		  // Change icon to SPLIT icon		  displayIcon = iconSplit;	  }	  // ELSE IF(Advise is SURRENDER)	  else if(gameAdvice.equals(SURRENDER))	  {		  // Change icon to SURRENDER icon		  displayIcon = iconSurrender;	  }//END IF	  	// Display answer in a dialog box		JOptionPane.showMessageDialog(null, "", gameAdvice, JOptionPane.INFORMATION_MESSAGE, displayIcon);   }}//end AdviceButtonActionListener/********************************************************** * Class Name     : DoubleButtonActionListener * Author         : William Golembieski * Date           : May 05, 2018 * Course/Section : CSC264 - 801 * Class Description: Implements the action for double button * * Methods: * ------- * actionPerformed  - if we are able, doubles the players bet and invokes dealer turn **********************************************************/class DoubleButtonActionListener implements ActionListener{	// Class constants	// Class variables	/**********************************************************	 * Method Name    : actionPerformed	 * Author         : William Golembieski	 * Date           : May 05, 2018	 * Course/Section : CSC264 - 801	 * Program Description: This method open a webpage	 *	 * BEGIN actionPerformed	 *       Set player name to text box value	 *       Initialize starting bankroll	 *       Clear top center and bottom panels	 *       Set up betting board	 * 	     Create text field	 * 	     Add to center panel	 * 	     Set up bottom panel	 * 	     Add panels to layout manager	 *       Revalidate and repaint frame	 * END actionPerformed	 **********************************************************/  public void actionPerformed(ActionEvent action)  {	  // Local Constants	  // Local Variables	  Card dealerHitCard = null;	  Iterator<Card> dealerIterator = game.getDealerIterator();	  JLabel dealerCardHitImage;	  /***********************************************************/	  // Player hits once more	  Card hitcard = game.playerHit();	  playercardhit = new JLabel(hitcard.getCardPicture());	  centerPanel.add(playercardhit);	  if(game.isPlayerBust())	  {		// Set result to "BUST!"		result.setText("<html><h1>BUST!</h1></html>");		// Set player Score		playerTotal.setText(playerName+" Total : " + game.getPlayerHandValue());		// Clear the bottom panel		bottomPanel.removeAll();		// Add Result		bottomPanel.add(result);		// Add Play Again button		bottomPanel.add(playAgainButton);		// Set Play again button to enabled		doubleButton.setEnabled(true);		// Add Quit Button		bottomPanel.add(quitButton);		// Set Quit button to enabled		quitButton.setEnabled(true);		// Remove funds		bankroll = bankroll - (game.getPlayerBet() * 2);	  }//END IF	  else	  {		  // run stand	  	  topPanel.remove(dealerInitialCard);	      topPanel.add(dealercard1);		  // Run dealer turn method	      game.dealerTurn();		  // Remove everything from panels	      topPanel.removeAll();	      topPanel.add(dealerTotal);	      dealerTotal.setText(" " + dealerTotal.getText());	      //iterate through cards and re-display	      for(int i = 0; i < game.getDealerHandSize(); i++)	      {			  // Get deler next card and set image to it	          dealerHitCard = game.getDealerCard(i);	          dealerCardHitImage = new JLabel(dealerHitCard.getCardPicture());	          topPanel.add(dealerCardHitImage);	      }		  // Set result text	      dealerTotal.setText("Dealer Total: " + game.getDealerHandValue());	      playerTotal.setText(playerName+" Total : " + game.getPlayerHandValue());	      result.setText(game.gameResult());	      //adjust bankroll for win or loss	      if(game.gameResult().equals("<html><h1>LOSE!</h1></html>"))	      {	  		// Decrement bet from bankroll	  		System.out.println("\n\n We just lost double button: " + game.getPlayerBet());	  		System.out.println("\n\n Bankroll was : " + bankroll);	  		bankroll = bankroll - (game.getPlayerBet() * 2);	  		System.out.println("\n\n Bankroll is now : " + bankroll);	  	}	  	else if(game.gameResult().equals("<html><h1>WIN!</h1></html>"))	  	{	  		// Add to bankroll	  		System.out.println("\n\n We just won double button: " + game.getPlayerBet());	  		System.out.println("\n\n Bankroll was : " + bankroll);	  		bankroll = bankroll + (game.getPlayerBet() * 2);	  		System.out.println("\n\n Bankroll is now : " + bankroll);	  	}//END IF	}//end IF	// Clear the bottom panel	bottomPanel.removeAll();	// Add Result	bottomPanel.add(result);	// Add Play Again button	bottomPanel.add(playAgainButton);	// Set Play again button to enabled	doubleButton.setEnabled(true);	// Add Quit Button	bottomPanel.add(quitButton);	// Set Quit button to enabled	quitButton.setEnabled(true);		revalidate();		repaint();  }//END}//end DoubleButtonActionListener}//end BlackjackPanel